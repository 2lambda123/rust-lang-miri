thread '<unnamed>' panicked at 'ow', $DIR/thread_local_const_drop_panic.rs:LL:CC
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
fatal runtime error: thread local panicked on drop
error: abnormal termination: the program aborted execution
  --> RUSTLIB/std/src/sys/PLATFORM/mod.rs:LL:CC
   |
LL |     unsafe { libc::abort() }
   |              ^^^^^^^^^^^^^ the program aborted execution
   |
   = note: inside `std::sys::PLATFORM::abort_internal` at RUSTLIB/std/src/sys/PLATFORM/mod.rs:LL:CC
   = note: inside `<std::thread::local_impl::abort_on_dtor_unwind::DtorUnwindGuard as std::ops::Drop>::drop` at RUSTLIB/std/src/rt.rs:LL:CC
   = note: inside `std::ptr::drop_in_place::<std::thread::local_impl::abort_on_dtor_unwind::DtorUnwindGuard> - shim(Some(std::thread::local_impl::abort_on_dtor_unwind::DtorUnwindGuard))` at RUSTLIB/core/src/ptr/mod.rs:LL:CC
   = note: inside `RUSTLIB/std/src/sys/PLATFORM/thread_local/fast_local.rs:LL:CC]>` at RUSTLIB/std/src/sys/PLATFORM/thread_local/mod.rs:LL:CC
note: inside `NOISY::__getit::destroy`
  --> $DIR/thread_local_const_drop_panic.rs:LL:CC
   |
LL | / thread_local! {
LL | |     pub static NOISY: NoisyDrop = const { NoisyDrop {} };
LL | | }
   | |_^
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace

error: aborting due to previous error

